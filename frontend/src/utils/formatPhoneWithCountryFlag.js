import { parsePhoneNumber, isValidPhoneNumber } from 'libphonenumber-js';

/**
 * Mapeamento de c√≥digos de pa√≠ses para emojis de bandeiras
 * Os emojis s√£o baseados no padr√£o Unicode Regional Indicator Symbols
 */
const countryFlags = {
  // Am√©ricas
  US: 'üá∫üá∏', // Estados Unidos
  BR: 'üáßüá∑', // Brasil
  CA: 'üá®üá¶', // Canad√°
  MX: 'üá≤üáΩ', // M√©xico
  AR: 'üá¶üá∑', // Argentina
  CL: 'üá®üá±', // Chile
  CO: 'üá®üá¥', // Col√¥mbia
  PE: 'üáµüá™', // Peru
  VE: 'üáªüá™', // Venezuela
  EC: 'üá™üá®', // Equador
  UY: 'üá∫üáæ', // Uruguai
  PY: 'üáµüáæ', // Paraguai
  BO: 'üáßüá¥', // Bol√≠via
  CR: 'üá®üá∑', // Costa Rica
  PA: 'üáµüá¶', // Panam√°
  GT: 'üá¨üáπ', // Guatemala
  CU: 'üá®üá∫', // Cuba
  DO: 'üá©üá¥', // Rep√∫blica Dominicana
  HN: 'üá≠üá≥', // Honduras
  NI: 'üá≥üáÆ', // Nicar√°gua
  SV: 'üá∏üáª', // El Salvador

  // Europa
  GB: 'üá¨üáß', // Reino Unido
  DE: 'üá©üá™', // Alemanha
  FR: 'üá´üá∑', // Fran√ßa
  IT: 'üáÆüáπ', // It√°lia
  ES: 'üá™üá∏', // Espanha
  PT: 'üáµüáπ', // Portugal
  NL: 'üá≥üá±', // Holanda
  BE: 'üáßüá™', // B√©lgica
  CH: 'üá®üá≠', // Su√≠√ßa
  AT: 'üá¶üáπ', // √Åustria
  SE: 'üá∏üá™', // Su√©cia
  NO: 'üá≥üá¥', // Noruega
  DK: 'üá©üá∞', // Dinamarca
  FI: 'üá´üáÆ', // Finl√¢ndia
  IE: 'üáÆüá™', // Irlanda
  PL: 'üáµüá±', // Pol√¥nia
  GR: 'üá¨üá∑', // Gr√©cia
  CZ: 'üá®üáø', // Rep√∫blica Tcheca
  RO: 'üá∑üá¥', // Rom√™nia
  HU: 'üá≠üá∫', // Hungria

  // √Åsia
  CN: 'üá®üá≥', // China
  JP: 'üáØüáµ', // Jap√£o
  KR: 'üá∞üá∑', // Coreia do Sul
  IN: 'üáÆüá≥', // √çndia
  ID: 'üáÆüá©', // Indon√©sia
  PH: 'üáµüá≠', // Filipinas
  VN: 'üáªüá≥', // Vietn√£
  TH: 'üáπüá≠', // Tail√¢ndia
  MY: 'üá≤üáæ', // Mal√°sia
  SG: 'üá∏üá¨', // Singapura
  TR: 'üáπüá∑', // Turquia
  SA: 'üá∏üá¶', // Ar√°bia Saudita
  AE: 'üá¶üá™', // Emirados √Årabes Unidos
  IL: 'üáÆüá±', // Israel

  // √Åfrica
  ZA: 'üáøüá¶', // √Åfrica do Sul
  EG: 'üá™üá¨', // Egito
  NG: 'üá≥üá¨', // Nig√©ria
  KE: 'üá∞üá™', // Qu√™nia
  MA: 'üá≤üá¶', // Marrocos
  AO: 'üá¶üá¥', // Angola
  MZ: 'üá≤üáø', // Mo√ßambique

  // Oceania
  AU: 'üá¶üá∫', // Austr√°lia
  NZ: 'üá≥üáø', // Nova Zel√¢ndia
};

/**
 * Obt√©m a bandeira emoji para um c√≥digo de pa√≠s
 * @param {string} countryCode - C√≥digo ISO de 2 letras do pa√≠s (ex: 'US', 'BR')
 * @returns {string} Emoji da bandeira ou string vazia se n√£o encontrado
 */
const getCountryFlag = (countryCode) => {
  return countryFlags[countryCode] || '';
};

/**
 * Formata um n√∫mero de telefone com a bandeira do pa√≠s
 * Suporta n√∫meros internacionais de diversos pa√≠ses
 *
 * @param {string} phoneNumber - N√∫mero de telefone a ser formatado (pode incluir @c.us)
 * @param {boolean} hidePartial - Se true, oculta parte do n√∫mero para LGPD
 * @param {boolean} isGroup - Se true, n√£o formata (grupos n√£o t√™m bandeira)
 * @returns {string} N√∫mero formatado com bandeira ou n√∫mero original se inv√°lido
 */
export const formatPhoneWithCountryFlag = (phoneNumber, hidePartial = false, isGroup = false) => {
  // Se for um grupo, retorna o n√∫mero original
  if (isGroup || !phoneNumber) {
    return phoneNumber;
  }

  try {
    // Remove sufixo do WhatsApp se presente
    let cleanNumber = String(phoneNumber).replace('@c.us', '').replace('@s.whatsapp.net', '').trim();

    // Se n√£o come√ßar com +, tenta adicionar
    if (!cleanNumber.startsWith('+')) {
      cleanNumber = '+' + cleanNumber;
    }

    // Valida se √© um n√∫mero de telefone v√°lido
    if (!isValidPhoneNumber(cleanNumber)) {
      // Se n√£o for v√°lido, retorna o n√∫mero original
      return phoneNumber;
    }

    // Parse do n√∫mero
    const parsed = parsePhoneNumber(cleanNumber);

    if (!parsed) {
      return phoneNumber;
    }

    // Obt√©m informa√ß√µes do n√∫mero
    const countryCode = parsed.country;
    const flag = getCountryFlag(countryCode);

    // Formata o n√∫mero no formato internacional
    let formattedNumber = parsed.formatInternational();

    // Remove o c√≥digo de pa√≠s do in√≠cio para melhor visualiza√ß√£o
    // Mant√©m apenas se n√£o for Brasil (para consist√™ncia com o formato atual)
    if (countryCode === 'BR') {
      // Para Brasil, remove o +55 e formata no padr√£o nacional
      formattedNumber = parsed.formatNational();
    }

    // Se precisar ocultar parte do n√∫mero (LGPD)
    if (hidePartial) {
      formattedNumber = hidePhoneDigits(formattedNumber);
    }

    // Retorna com a bandeira
    return flag ? `${flag} ${formattedNumber}` : formattedNumber;

  } catch (error) {
    console.error('Erro ao formatar n√∫mero com bandeira:', error);
    // Em caso de erro, retorna o n√∫mero original
    return phoneNumber;
  }
};

/**
 * Oculta parte dos d√≠gitos do n√∫mero para conformidade com LGPD
 * @param {string} formattedNumber - N√∫mero j√° formatado
 * @returns {string} N√∫mero com d√≠gitos ocultados
 */
const hidePhoneDigits = (formattedNumber) => {
  // Remove todos os caracteres n√£o num√©ricos para trabalhar apenas com d√≠gitos
  const digitsOnly = formattedNumber.replace(/\D/g, '');

  if (digitsOnly.length < 4) {
    return formattedNumber; // N√∫mero muito curto, n√£o oculta
  }

  // Mant√©m os 2 primeiros e 2 √∫ltimos d√≠gitos, oculta o meio
  const firstTwo = digitsOnly.slice(0, 2);
  const lastTwo = digitsOnly.slice(-2);

  // Reconstr√≥i mantendo a formata√ß√£o original mas substituindo d√≠gitos do meio
  let result = formattedNumber;
  let digitsToHide = digitsOnly.length - 4;

  // Estrat√©gia simples: substitui uma sequ√™ncia de d√≠gitos por asteriscos
  // Mant√©m par√™nteses, espa√ßos e h√≠fens
  const pattern = /(\d{2})([\d\s\-\(\)]+)(\d{2})/;
  const match = formattedNumber.match(pattern);

  if (match) {
    const middle = match[2].replace(/\d/g, '*');
    result = formattedNumber.replace(pattern, `$1${middle}$3`);
  }

  return result;
};

/**
 * Fun√ß√£o auxiliar para obter apenas o c√≥digo do pa√≠s de um n√∫mero
 * @param {string} phoneNumber - N√∫mero de telefone
 * @returns {string|null} C√≥digo do pa√≠s (ex: 'BR', 'US') ou null se inv√°lido
 */
export const getPhoneCountryCode = (phoneNumber) => {
  try {
    let cleanNumber = String(phoneNumber).replace('@c.us', '').replace('@s.whatsapp.net', '').trim();

    if (!cleanNumber.startsWith('+')) {
      cleanNumber = '+' + cleanNumber;
    }

    if (isValidPhoneNumber(cleanNumber)) {
      const parsed = parsePhoneNumber(cleanNumber);
      return parsed ? parsed.country : null;
    }

    return null;
  } catch (error) {
    return null;
  }
};

export default formatPhoneWithCountryFlag;
