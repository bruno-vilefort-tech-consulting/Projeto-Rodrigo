name: build-artifacts
on:
  push:
    tags: ["v*.*.*"]

permissions:
  contents: write   # necessário para publicar release

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Instalar Rust para Tauri
      - uses: dtolnay/rust-toolchain@stable

      # Instalar dependências do Tauri (Linux)
      - run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      # Habilitar pnpm
      - run: corepack enable

      # BACKEND (usa pnpm)
      - run: |
          cd backend
          pnpm install --frozen-lockfile
          pnpm run build
          # Incluir package.json no dist para migrations/seeds
          cp package.json dist/
          # Criar config.json como cópia de database.js (para compatibilidade Sequelize)
          mkdir -p dist/config
          cp dist/config/database.js dist/config/config.json 2>/dev/null || true
          # Criar .sequelizerc na raiz do backend (não em dist/)
          cat > .sequelizerc.deploy <<'EOF'
          const { resolve } = require("path");
          module.exports = {
            "config": resolve(__dirname, "dist", "config", "database.js"),
            "models-path": resolve(__dirname, "dist", "models"),
            "migrations-path": resolve(__dirname, "dist", "database", "migrations"),
            "seeders-path": resolve(__dirname, "dist", "database", "seeds")
          };
          EOF
          tar czf ../backend_dist.tar.gz dist .sequelizerc.deploy
          # --dereference converte hard links do pnpm em arquivos regulares
          # Inclui ffmpeg binaries específicos de plataforma
          tar --dereference -czf ../backend_node_modules.tar.gz node_modules

      # FRONTEND (usa pnpm)
      - run: |
          cd frontend
          pnpm install --no-frozen-lockfile --shamefully-hoist
          NODE_OPTIONS="--max-old-space-size=4096" pnpm run build
          cp server.js build/
          cp package.json build/
          # Instalar APENAS dependências de produção do server.js (express, dotenv)
          cd build
          npm install --omit=dev --legacy-peer-deps
          cd ..
          tar czf ../frontend_build.tar.gz build

      # INSTALADOR TAURI
      - name: Build Tauri Installer
        run: |
          cd @instalador
          npm install
          npm run build
          # Tauri CLI procura src-tauri/ na raiz, então vamos criar um symlink
          ln -sf src/src-tauri src-tauri
          npm run tauri build -- --verbose

      # Debug: Verificar estrutura de diretórios
      - name: Debug - List Tauri build output
        run: |
          echo "=== Procurando arquivos .deb ==="
          find @instalador -name "*.deb" -ls || echo "Nenhum .deb encontrado"
          echo "=== Estrutura do diretório target ==="
          find @instalador -type d -name "target" -exec ls -laR {} \; || echo "Diretório target não encontrado"

      # Copiar instalador para raiz
      - name: Copy installer to root
        run: |
          if find @instalador -name "*.deb" -exec cp {} ./chatia-installer.deb \; ; then
            echo "✅ Instalador copiado com sucesso"
            ls -lh chatia-installer.deb
          else
            echo "❌ ERRO: Nenhum arquivo .deb encontrado!"
            exit 1
          fi

      # checksums + manifest
      - id: mkmanifest
        run: |
          sha256sum backend_dist.tar.gz > sha256_backend_dist.txt
          sha256sum backend_node_modules.tar.gz > sha256_backend_node_modules.txt
          sha256sum frontend_build.tar.gz > sha256_frontend_build.txt

          BDD=$(cut -d' ' -f1 sha256_backend_dist.txt)
          BNM=$(cut -d' ' -f1 sha256_backend_node_modules.txt)
          FBD=$(cut -d' ' -f1 sha256_frontend_build.txt)

          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}"

          cat > manifest.json <<JSON
          {
            "version": "${{ github.ref_name }}",
            "artifacts": [
              {"name":"backend_dist","url":"$RELEASE_URL/backend_dist.tar.gz","sha256":"$BDD","targetDir":"/home/deploy/__EMPRESA__/backend","stripComponents":1,"type":"tar.gz"},
              {"name":"backend_node_modules","url":"$RELEASE_URL/backend_node_modules.tar.gz","sha256":"$BNM","targetDir":"/home/deploy/__EMPRESA__/backend/node_modules","stripComponents":1,"type":"tar.gz"},
              {"name":"frontend_build","url":"$RELEASE_URL/frontend_build.tar.gz","sha256":"$FBD","targetDir":"/home/deploy/__EMPRESA__/frontend","stripComponents":0,"type":"tar.gz"}
            ]
          }
          JSON

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            backend_dist.tar.gz
            backend_node_modules.tar.gz
            frontend_build.tar.gz
            manifest.json
            postinstall.sh
            chatia-installer.deb
