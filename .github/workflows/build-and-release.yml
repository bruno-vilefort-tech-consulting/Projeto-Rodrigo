name: Build and Release ChatIA Flow

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v6.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-artifacts:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable pnpm
        run: corepack enable

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # ======================== BACKEND BUILD ========================
      - name: Build Backend
        run: |
          cd backend

          # Install dependencies
          pnpm install --frozen-lockfile

          # Run linting and type checking
          pnpm run lint || true
          pnpm run type-check || true

          # Build TypeScript
          pnpm run build

          # Prepare deployment package
          cp package.json dist/
          cp package-lock.json dist/ 2>/dev/null || true
          cp pnpm-lock.yaml dist/ 2>/dev/null || true

          # Copy migrations and seeds (preserve structure)
          cp -r src/database dist/ 2>/dev/null || true

          # Create Sequelize config for deployment
          cat > dist/.sequelizerc <<'EOF'
          const { resolve } = require("path");
          module.exports = {
            "config": resolve(__dirname, "config", "database.js"),
            "models-path": resolve(__dirname, "models"),
            "migrations-path": resolve(__dirname, "database", "migrations"),
            "seeders-path": resolve(__dirname, "database", "seeds")
          };
          EOF

          # Create tarball with backend code
          tar -czf ../backend_dist.tar.gz \
            --transform 's,^dist/,,' \
            dist/

          # Create tarball with node_modules (production deps only)
          # Using --dereference to handle pnpm hard links
          tar --dereference -czf ../backend_node_modules.tar.gz \
            --exclude='*.map' \
            --exclude='*.ts' \
            --exclude='.bin' \
            node_modules

      # ======================== FRONTEND BUILD ========================
      - name: Build Frontend
        run: |
          cd frontend

          # Install dependencies with shamefully-hoist for CRA compatibility
          pnpm install --no-frozen-lockfile --shamefully-hoist

          # Set production environment
          export NODE_ENV=production
          export CI=false  # Disable treating warnings as errors
          export GENERATE_SOURCEMAP=false

          # Build with increased memory
          NODE_OPTIONS="--max-old-space-size=4096" pnpm run build

          # Verify build output
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi

          # Copy server files
          cp server.js build/
          cp package.json build/

          # Install production dependencies for server
          cd build
          npm install --omit=dev --legacy-peer-deps express dotenv
          cd ..

          # Create tarball
          tar -czf ../frontend_build.tar.gz \
            --exclude='*.map' \
            build/

      # ======================== GENERATE CHECKSUMS ========================
      - name: Generate checksums and manifest
        id: checksums
        run: |
          # Generate SHA256 checksums
          sha256sum backend_dist.tar.gz > checksums.txt
          sha256sum backend_node_modules.tar.gz >> checksums.txt
          sha256sum frontend_build.tar.gz >> checksums.txt

          # Extract checksums
          BACKEND_DIST_SHA=$(sha256sum backend_dist.tar.gz | cut -d' ' -f1)
          BACKEND_MODULES_SHA=$(sha256sum backend_node_modules.tar.gz | cut -d' ' -f1)
          FRONTEND_BUILD_SHA=$(sha256sum frontend_build.tar.gz | cut -d' ' -f1)

          # Generate manifest.json
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}"

          cat > manifest.json <<EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "artifacts": [
              {
                "name": "backend_dist",
                "url": "${RELEASE_URL}/backend_dist.tar.gz",
                "sha256": "${BACKEND_DIST_SHA}",
                "size": $(stat -c%s backend_dist.tar.gz),
                "targetDir": "/home/deploy/__EMPRESA__/backend",
                "stripComponents": 0,
                "type": "tar.gz",
                "description": "Backend compiled code and configurations"
              },
              {
                "name": "backend_node_modules",
                "url": "${RELEASE_URL}/backend_node_modules.tar.gz",
                "sha256": "${BACKEND_MODULES_SHA}",
                "size": $(stat -c%s backend_node_modules.tar.gz),
                "targetDir": "/home/deploy/__EMPRESA__/backend",
                "stripComponents": 0,
                "type": "tar.gz",
                "description": "Backend Node.js dependencies"
              },
              {
                "name": "frontend_build",
                "url": "${RELEASE_URL}/frontend_build.tar.gz",
                "sha256": "${FRONTEND_BUILD_SHA}",
                "size": $(stat -c%s frontend_build.tar.gz),
                "targetDir": "/home/deploy/__EMPRESA__/frontend",
                "stripComponents": 0,
                "type": "tar.gz",
                "description": "Frontend production build"
              }
            ],
            "requirements": {
              "node": ">=20.0.0",
              "npm": ">=10.0.0",
              "postgres": ">=13.0",
              "redis": ">=6.0"
            }
          }
          EOF

          # Display manifest for verification
          echo "Generated manifest.json:"
          jq . manifest.json

      # ======================== CREATE RELEASE ========================
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ChatIA Flow ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-alpha') }}
          generate_release_notes: true
          body: |
            ## ChatIA Flow ${{ steps.version.outputs.version }}

            ### 🚀 Installation

            ```bash
            # Download and run the installer
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/install-chatia.sh -o install-chatia.sh
            chmod +x install-chatia.sh
            sudo ./install-chatia.sh
            ```

            ### 📦 Artifacts

            This release includes:
            - **Backend**: Compiled TypeScript code with Sequelize migrations
            - **Frontend**: Production-optimized React build
            - **Installer**: Automated installation script with GitHub Actions integration

            ### 🔧 Requirements

            - Ubuntu 20.04+ or Debian 11+
            - Node.js 20+
            - PostgreSQL 13+
            - Redis 6+
            - 2GB+ RAM
            - 10GB+ free disk space

            ### 📝 Changelog

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

            ---

            **Full Documentation**: [docs.chatia.com](https://docs.chatia.com)
            **Support**: [support@chatia.com](mailto:support@chatia.com)
          files: |
            backend_dist.tar.gz
            backend_node_modules.tar.gz
            frontend_build.tar.gz
            manifest.json
            checksums.txt
            install-chatia.sh
            postinstall.sh

  # ======================== BUILD DOCKER IMAGE ========================
  # Optional: Only runs if Dockerfile exists
  build-docker:
    runs-on: ubuntu-22.04
    needs: build-artifacts
    if: success()
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Dockerfile found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Dockerfile not found - skipping Docker build"
          fi

      - name: Set up Docker Buildx
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.build-artifacts.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.build-artifacts.outputs.version }}

  # ======================== SECURITY SCAN ========================
  security-scan:
    runs-on: ubuntu-22.04
    needs: build-artifacts
    if: success()
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          cd backend && npm audit --production || true
          cd ../frontend && npm audit --production || true

  # ======================== NOTIFY DEPLOYMENT ========================
  notify:
    runs-on: ubuntu-22.04
    needs: [build-artifacts, build-docker]
    if: always()

    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.build-artifacts.result }}" == "success" ]]; then
            echo "✅ Release ${{ needs.build-artifacts.outputs.version }} created successfully!"
            echo "📦 Artifacts available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-artifacts.outputs.version }}"
          else
            echo "❌ Release ${{ needs.build-artifacts.outputs.version }} failed!"
            echo "Check the workflow logs for details."
          fi

      # Optional: Send to Slack/Discord/Email
      # - name: Notify Slack
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     webhook-url: ${{ secrets.SLACK_WEBHOOK }}
      #     payload: |
      #       {
      #         "text": "ChatIA Flow ${{ needs.build-artifacts.outputs.version }} released!"
      #       }