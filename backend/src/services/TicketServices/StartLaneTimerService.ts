import Ticket from "../../models/Ticket";
import TicketTag from "../../models/TicketTag";
import Tag from "../../models/Tag";
import AppError from "../../errors/AppError";

interface Request {
  ticketId: number;
  companyId: number;
}

const StartLaneTimerService = async ({
  ticketId,
  companyId
}: Request): Promise<void> => {
  // Buscar o ticket
  const ticket = await Ticket.findOne({
    where: {
      id: ticketId,
      companyId
    }
  });

  if (!ticket) {
    throw new AppError("Ticket n√£o encontrado", 404);
  }

  // Buscar a lane (tag kanban) atual do ticket
  const ticketTag = await TicketTag.findOne({
    where: { ticketId },
    include: [{
      model: Tag,
      as: "tag",
      where: {
        kanban: 1,
        companyId
      }
    }]
  });

  // Se n√£o tem lane kanban, n√£o faz nada
  if (!ticketTag || !ticketTag.tag) {
    console.log(`‚è≠Ô∏è [StartLaneTimer] Ticket ${ticketId} n√£o est√° em nenhuma lane kanban, timer n√£o iniciado`);
    return;
  }

  const currentLane = ticketTag.tag;

  // Se a lane n√£o tem timeLane configurado ou n√£o tem nextLaneId, n√£o inicia timer
  if (!currentLane.timeLane || currentLane.timeLane <= 0 || !currentLane.nextLaneId) {
    console.log(`‚è≠Ô∏è [StartLaneTimer] Lane "${currentLane.name}" n√£o tem timer ou nextLaneId configurado, timer n√£o iniciado`);
    return;
  }

  // Calcular quando o ticket deve ser movido
  const now = new Date();
  const moveAt = new Date(now.getTime() + currentLane.timeLane * 60 * 1000); // timeLane est√° em minutos

  // Atualizar o ticket com os dados do timer e habilitar movimento autom√°tico
  await ticket.update({
    laneTimerStartedAt: now,
    laneNextMoveAt: moveAt,
    allowAutomaticMove: true // ‚úÖ Permite que o cron job mova automaticamente
  });

  // üîç DEBUG: Log detalhado do timer iniciado
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë ‚è∞ START LANE TIMER
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë Ticket ID:        ${ticketId}
‚ïë Lane:             ${currentLane.name} (ID: ${currentLane.id})
‚ïë timeLane:         ${currentLane.timeLane} minutos
‚ïë nextLaneId:       ${currentLane.nextLaneId}
‚ïë rollbackLaneId:   ${currentLane.rollbackLaneId || 'N/A'}
‚ïë
‚ïë Timer:
‚ïë   - Iniciado em:  ${now.toISOString()}
‚ïë   - Mover√° em:    ${moveAt.toISOString()}
‚ïë   - Dura√ß√£o:      ${currentLane.timeLane} minuto(s)
‚ïë
‚ïë allowAutomaticMove: true ‚úÖ
‚ïë
‚ïë Pr√≥xima A√ß√£o: Cron mover√° para nextLaneId ${currentLane.nextLaneId} em ${currentLane.timeLane} minuto(s)
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
`);
};

export default StartLaneTimerService;
